// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots.

package config

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"testing"

	"github.com/mitchellh/mapstructure"
	"github.com/stretchr/testify/assert"
)

var dereferencableKindsServerConfig = map[reflect.Kind]struct{}{
	reflect.Array: {}, reflect.Chan: {}, reflect.Map: {}, reflect.Ptr: {}, reflect.Slice: {},
}

// Checks if t is a kind that can be dereferenced to get its underlying type.
func canGetElementServerConfig(t reflect.Kind) bool {
	_, exists := dereferencableKindsServerConfig[t]
	return exists
}

// This decoder hook tests types for json unmarshaling capability. If implemented, it uses json unmarshal to build the
// object. Otherwise, it'll just pass on the original data.
func jsonUnmarshalerHookServerConfig(_, to reflect.Type, data interface{}) (interface{}, error) {
	unmarshalerType := reflect.TypeOf((*json.Unmarshaler)(nil)).Elem()
	if to.Implements(unmarshalerType) || reflect.PtrTo(to).Implements(unmarshalerType) ||
		(canGetElementServerConfig(to.Kind()) && to.Elem().Implements(unmarshalerType)) {

		raw, err := json.Marshal(data)
		if err != nil {
			fmt.Printf("Failed to marshal Data: %v. Error: %v. Skipping jsonUnmarshalHook", data, err)
			return data, nil
		}

		res := reflect.New(to).Interface()
		err = json.Unmarshal(raw, &res)
		if err != nil {
			fmt.Printf("Failed to umarshal Data: %v. Error: %v. Skipping jsonUnmarshalHook", data, err)
			return data, nil
		}

		return res, nil
	}

	return data, nil
}

func decode_ServerConfig(input, result interface{}) error {
	config := &mapstructure.DecoderConfig{
		TagName:          "json",
		WeaklyTypedInput: true,
		Result:           result,
		DecodeHook: mapstructure.ComposeDecodeHookFunc(
			mapstructure.StringToTimeDurationHookFunc(),
			mapstructure.StringToSliceHookFunc(","),
			jsonUnmarshalerHookServerConfig,
		),
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	return decoder.Decode(input)
}

func join_ServerConfig(arr interface{}, sep string) string {
	listValue := reflect.ValueOf(arr)
	strs := make([]string, 0, listValue.Len())
	for i := 0; i < listValue.Len(); i++ {
		strs = append(strs, fmt.Sprintf("%v", listValue.Index(i)))
	}

	return strings.Join(strs, sep)
}

func testDecodeJson_ServerConfig(t *testing.T, val, result interface{}) {
	assert.NoError(t, decode_ServerConfig(val, result))
}

func testDecodeRaw_ServerConfig(t *testing.T, vStringSlice, result interface{}) {
	assert.NoError(t, decode_ServerConfig(vStringSlice, result))
}

func TestServerConfig_GetPFlagSet(t *testing.T) {
	val := ServerConfig{}
	cmdFlags := val.GetPFlagSet("")
	assert.True(t, cmdFlags.HasFlags())
}

func TestServerConfig_SetFlags(t *testing.T) {
	actual := ServerConfig{}
	cmdFlags := actual.GetPFlagSet("")
	assert.True(t, cmdFlags.HasFlags())

	t.Run("Test_httpPort", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("httpPort", testValue)
			if vInt, err := cmdFlags.GetInt("httpPort"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vInt), &actual.HTTPPort)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_grpcPort", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("grpcPort", testValue)
			if vInt, err := cmdFlags.GetInt("grpcPort"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vInt), &actual.GrpcPort)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_grpcServerReflection", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("grpcServerReflection", testValue)
			if vBool, err := cmdFlags.GetBool("grpcServerReflection"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.GrpcServerReflection)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_kube-config", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("kube-config", testValue)
			if vString, err := cmdFlags.GetString("kube-config"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.KubeConfig)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_master", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("master", testValue)
			if vString, err := cmdFlags.GetString("master"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Master)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.secure", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.secure", testValue)
			if vBool, err := cmdFlags.GetBool("security.secure"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.Security.Secure)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.ssl.certificateFile", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.ssl.certificateFile", testValue)
			if vString, err := cmdFlags.GetString("security.ssl.certificateFile"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Ssl.CertificateFile)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.ssl.keyFile", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.ssl.keyFile", testValue)
			if vString, err := cmdFlags.GetString("security.ssl.keyFile"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Ssl.KeyFile)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.useAuth", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.useAuth", testValue)
			if vBool, err := cmdFlags.GetBool("security.useAuth"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.Security.UseAuth)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.clientId", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.clientId", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.clientId"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.ClientID)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.clientSecretFile", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.clientSecretFile", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.clientSecretFile"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.ClientSecretFile)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.baseUrl", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.baseUrl", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.baseUrl"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.BaseURL)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.authorizeUrl", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.authorizeUrl", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.authorizeUrl"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.AuthorizeURL)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.tokenUrl", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.tokenUrl", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.tokenUrl"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.TokenURL)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.callbackUrl", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.callbackUrl", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.callbackUrl"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.CallbackURL)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.claims.aud", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.claims.aud", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.claims.aud"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.Claims.Audience)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.claims.iss", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.claims.iss", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.claims.iss"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.Claims.Issuer)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.idpUserInfoEndpoint", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.idpUserInfoEndpoint", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.idpUserInfoEndpoint"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.IdpUserInfoEndpoint)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.cookieHashKeyFile", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.cookieHashKeyFile", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.cookieHashKeyFile"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.CookieHashKeyFile)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.cookieBlockKeyFile", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.cookieBlockKeyFile", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.cookieBlockKeyFile"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.CookieBlockKeyFile)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.redirectUrl", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.redirectUrl", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.redirectUrl"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.RedirectURL)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.httpAuthorizationHeader", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.httpAuthorizationHeader", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.httpAuthorizationHeader"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.HTTPAuthorizationHeader)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.grpcAuthorizationHeader", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.grpcAuthorizationHeader", testValue)
			if vString, err := cmdFlags.GetString("security.oauth.grpcAuthorizationHeader"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.Security.Oauth.GrpcAuthorizationHeader)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.disableForHttp", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.disableForHttp", testValue)
			if vBool, err := cmdFlags.GetBool("security.oauth.disableForHttp"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.Security.Oauth.DisableForHTTP)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.disableForGrpc", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.oauth.disableForGrpc", testValue)
			if vBool, err := cmdFlags.GetBool("security.oauth.disableForGrpc"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.Security.Oauth.DisableForGrpc)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.oauth.scopes", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := join_ServerConfig("1,1", ",")

			cmdFlags.Set("security.oauth.scopes", testValue)
			if vStringSlice, err := cmdFlags.GetStringSlice("security.oauth.scopes"); err == nil {
				testDecodeRaw_ServerConfig(t, join_ServerConfig(vStringSlice, ","), &actual.Security.Oauth.Scopes)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.auditAccess", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.auditAccess", testValue)
			if vBool, err := cmdFlags.GetBool("security.auditAccess"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.Security.AuditAccess)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.allowCors", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("security.allowCors", testValue)
			if vBool, err := cmdFlags.GetBool("security.allowCors"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vBool), &actual.Security.AllowCors)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.allowedOrigins", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := join_ServerConfig("1,1", ",")

			cmdFlags.Set("security.allowedOrigins", testValue)
			if vStringSlice, err := cmdFlags.GetStringSlice("security.allowedOrigins"); err == nil {
				testDecodeRaw_ServerConfig(t, join_ServerConfig(vStringSlice, ","), &actual.Security.AllowedOrigins)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_security.allowedHeaders", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := join_ServerConfig("1,1", ",")

			cmdFlags.Set("security.allowedHeaders", testValue)
			if vStringSlice, err := cmdFlags.GetStringSlice("security.allowedHeaders"); err == nil {
				testDecodeRaw_ServerConfig(t, join_ServerConfig(vStringSlice, ","), &actual.Security.AllowedHeaders)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_thirdPartyConfig.flyteClient.clientId", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("thirdPartyConfig.flyteClient.clientId", testValue)
			if vString, err := cmdFlags.GetString("thirdPartyConfig.flyteClient.clientId"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.ThirdPartyConfig.FlyteClientConfig.ClientID)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
	t.Run("Test_thirdPartyConfig.flyteClient.redirectUri", func(t *testing.T) {

		t.Run("Override", func(t *testing.T) {
			testValue := "1"

			cmdFlags.Set("thirdPartyConfig.flyteClient.redirectUri", testValue)
			if vString, err := cmdFlags.GetString("thirdPartyConfig.flyteClient.redirectUri"); err == nil {
				testDecodeJson_ServerConfig(t, fmt.Sprintf("%v", vString), &actual.ThirdPartyConfig.FlyteClientConfig.RedirectURI)

			} else {
				assert.FailNow(t, err.Error())
			}
		})
	})
}
